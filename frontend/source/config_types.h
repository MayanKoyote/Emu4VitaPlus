#pragma once
#include <stdint.h>
#include <vector>
#define RETRO_DEVICE_ID_NONE 0xFF

struct ControlMapConfig
{
    uint32_t psv;
    std::vector<uint8_t> retros;
    bool turbo = false;
};

enum HotKeyConfig
{
    SAVE_STATE = 0,
    LOAD_STATE,
    EXIT_GAME,
    GAME_SPEED_UP,
    GAME_SPEED_DOWN,
    GAME_REWIND,
    // CONTROLLER_PORT_UP,
    // CONTROLLER_PORT_DOWN,
    SWITCH_KEYBOARD,
    KEYBOARD_UP,
    KEYBOARD_DOWN,
    MENU_TOGGLE,
    HOT_KEY_COUNT
};

enum DisplaySizeConfig
{
    CONFIG_DISPLAY_SIZE_1X = 0,
    CONFIG_DISPLAY_SIZE_2X,
    CONFIG_DISPLAY_SIZE_3X,
    CONFIG_DISPLAY_SIZE_FULL,
    CONFIG_DISPLAY_SIZE_COUNT,
};

enum DisplayRatioConfig
{
    CONFIG_DISPLAY_RATIO_BY_GAME_RESOLUTION = 0,
    CONFIG_DISPLAY_RATIO_BY_DEVICE_SCREEN,
    CONFIG_DISPLAY_RATIO_8_7,
    CONFIG_DISPLAY_RATIO_4_3,
    CONFIG_DISPLAY_RATIO_3_2,
    CONFIG_DISPLAY_RATIO_16_9,
    CONFIG_DISPLAY_RATIO_COUNT,
};

enum DisplayRotateConfig
{
    CONFIG_DISPLAY_ROTATE_DISABLE = 0,
    CONFIG_DISPLAY_ROTATE_CW_90,
    CONFIG_DISPLAY_ROTATE_CW_180,
    CONFIG_DISPLAY_ROTATE_CW_270,
    CONFIG_DISPLAY_ROTATE_DEFAULT,
    CONFIG_DISPLAY_ROTATE_COUNT,
};

enum GraphicsSmooth
{
    CONFIG_GRAPHICS_SMOOTHER_NO = 0,
    CONFIG_GRAPHICS_SMOOTHER_YES,
    CONFIG_GRAPHICS_SMOOTHER_COUNT,
};

enum GraphicsOverlayModeConfig
{
    CONFIG_GRAPHICS_OVERLAY_MODE_OVERLAY = 0,
    CONFIG_GRAPHICS_OVERLAY_MODE_BACKGROUND,
    CONFIG_GRAPHICS_OVERLAY_MODE_COUNT,
};

enum GraphicsConfig
{
    DISPLAY_SIZE = 0,
    DISPLAY_RATIO,
    DISPLAY_ROTATE,
    GRAPHICS_SHADER,
    GRAPHICS_SMOOTH,
    GRAPHICS_OVERLAY_MODE,
    GRAPHICS_OVERLAY,
    GRAPHICS_CONFIG_COUNT,
};

enum MouseConfig
{
    CONFIG_MOUSE_DISABLE = 0,
    CONFIG_MOUSE_FRONT,
    CONFIG_MOUSE_REAR,
    CONFIG_MOUSE_COUNT,
};

enum CpuFreqConfig
{
    CPU_AUTO = 0;
    CPU_333,
    CPU_444,
};