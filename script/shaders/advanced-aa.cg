#define AA_RESOLUTION_X_DEF IN.texture_size.x
#define AA_RESOLUTION_Y_DEF IN.texture_size.y
#define AA_RESOLUTION_X AA_RESOLUTION_X_DEF
#define AA_RESOLUTION_Y AA_RESOLUTION_Y_DEF

static float3  dt = float3(1,1,1);

struct out_vertex {
    float4 position : POSITION;
    float2 CT : TEXCOORD0;
    float4 t1 : TEXCOORD1;
    float4 t2 : TEXCOORD2;
    float4 t3 : TEXCOORD3;
    float4 t4 : TEXCOORD4;
};

#if defined(VERTEX)
struct input {
    float2 video_size;
    float2 texture_size;
    float2 output_size;
    float  frame_count;
    float  frame_direction;
    float frame_rotation;
};

void  main(
    float4 aPosition	: POSITION,
    float2 aTexcoord : TEXCOORD0,
    uniform float4x4 wvp,
    uniform input IN,
    out out_vertex OUT) {
    OUT.position = mul(aPosition, wvp);
    
    float2 ps = float2(1.0/((AA_RESOLUTION_X == 0) ? AA_RESOLUTION_X_DEF : AA_RESOLUTION_X), 1.0/((AA_RESOLUTION_Y == 0) ? AA_RESOLUTION_Y_DEF : AA_RESOLUTION_Y));
    float dx = ps.x*0.5;
    float dy = ps.y*0.5;
    
    // This line fix a bug in ATI cards.
    float2 texCoord1 = aTexcoord + float2(0.0000001, 0.0000001);
    
    OUT.CT = texCoord1;
    OUT.t1.xy = texCoord1 + float2(-dx, 0);
    OUT.t2.xy = texCoord1 + float2(dx, 0);
    OUT.t3.xy = texCoord1 + float2(0,-dy);
    OUT.t4.xy = texCoord1 + float2(0, dy);
    OUT.t1.zw = texCoord1 + float2(-dx,-dy);
    OUT.t2.zw = texCoord1 + float2(-dx, dy);
    OUT.t3.zw = texCoord1 + float2(dx,-dy);
    OUT.t4.zw = texCoord1 + float2(dx, dy);
}

#elif defined(FRAGMENT)
/* 
FRAGMENT SHADER
*/

float4 advanced_aa(uniform sampler2D decal, float2 CT, float4 t1, 
    float4 t2, float4 t3, float4 t4) {
    float3 c00 = tex2D(decal, t1.zw).xyz; 
    float3 c10 = tex2D(decal, t3.xy).xyz;
    float3 c20 = tex2D(decal, t3.zw).xyz;
    float3 c01 = tex2D(decal, t1.xy).xyz;
    float3 c11 = tex2D(decal, CT).xyz;
    float3 c21 = tex2D(decal, t2.xy).xyz;
    float3 c02 = tex2D(decal, t2.zw).xyz;
    float3 c12 = tex2D(decal, t4.xy).xyz;
    float3 c22 = tex2D(decal, t4.zw).xyz;
    
    float d1=dot(abs(c00-c22),dt)+0.0001;
    float d2=dot(abs(c20-c02),dt)+0.0001;
    float hl=dot(abs(c01-c21),dt)+0.0001;
    float vl=dot(abs(c10-c12),dt)+0.0001;
    
    float k1=0.5*(hl+vl);
    float k2=0.5*(d1+d2);
    
    float3 _t1=(hl*(c10+c12)+vl*(c01+c21)+k1*c11)/(2.5*(hl+vl));
    float3 _t2=(d1*(c20+c02)+d2*(c00+c22)+k2*c11)/(2.5*(d1+d2));
    
    k1=dot(abs(_t1-c11),dt)+0.0001;
    k2=dot(abs(_t2-c11),dt)+0.0001;
    
    return float4((k1*_t2+k2*_t1)/(k1+k2),1);
}

float4 main(in out_vertex VOUT, uniform sampler2D decal : TEXUNIT0) : COLOR {
    return advanced_aa(decal, VOUT.CT, VOUT.t1, VOUT.t2, VOUT.t3, VOUT.t4);
}
#endif