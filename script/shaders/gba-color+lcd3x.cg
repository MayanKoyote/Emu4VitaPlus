/*
Shader Modified: Pokefan531
Color Mangler
Author: hunterk
License: Public domain
*/

// Shader that replicates the LCD dynamics from a GameBoy Advance

#define darken_screen 0.5
#define target_gamma 2.2
#define display_gamma 2.2
#define sat 1.0
#define lum 1.0
#define contrast 1.0
#define blr 0.0
#define blg 0.0
#define blb 0.0
#define r 0.845
#define g 0.68
#define b 0.755
#define rg 0.09
#define rb 0.16
#define gr 0.17
#define gb 0.085
#define br -0.015
#define bg 0.23
#define overscan_percent_x 0.0
#define overscan_percent_y 0.0

struct out_vertex {
    float4 position : POSITION;
    float2 texCoord : TEXCOORD;
    float2 omega : TEXCOORD1;
};

struct input {
    float2 video_size;
    float2 texture_size;
    float2 output_size;
};

#if defined(VERTEX)
/*
VERTEX_SHADER
*/
void main(
    float2 aTexcoord,
    float4 aPosition,
    uniform input IN,
    uniform float4x4 wvp,
    out_vertex out OUT) {
    OUT.position = mul(aPosition, wvp);
    
    float2 shift = 0.5 * IN.video_size / IN.texture_size;
    OUT.texCoord = (aTexcoord - shift) * (1.0 - float2(overscan_percent_x / 100.0, overscan_percent_y / 100.0)) + shift;
    OUT.omega = 3.141592654 * 2 * IN.texture_size;
}

#elif defined(FRAGMENT)
uniform sampler2D decal : TEXUNIT0;

static const int brighten_scanlines = 32;
static const int brighten_lcd = 12;

static const float3 offsets = 3.141592654 * float3(
    1.0 / 2,
    1.0 / 2 - 2.0 / 3,
    1.0 / 2 - 4.0 / 3);

float4 gba_color(float2 texCoord : TEXCOORD) {
    float4 screen = pow(tex2D(decal, texCoord), target_gamma + darken_screen).rgba; // sample image in linear colorspace
    float4 avglum = float4(0.5, 0.5, 0.5, 0.5);
    screen = lerp(screen, avglum, (1.0 - contrast));
    
    //				r   g    b   black
    float4x4 color = {
        r, gr, br, blr,      // red channel
        rg, g, bg, blg,      // green channel
        rb, gb, b, blb,      // blue channel
        0.0, 0.0, 0.0, 1.0
    }; // alpha channel; these numbers do nothing for our purposes.
    
    float4x4 adjust = {
        (1.0 - sat) * 0.3086 + sat, (1.0 - sat) * 0.6094, (1.0 - sat) * 0.0820, 0.0,
        (1.0 - sat) * 0.3086, (1.0 - sat) * 0.6094 + sat, (1.0 - sat) * 0.0820, 0.0,
        (1.0 - sat) * 0.3086, (1.0 - sat) * 0.6094, (1.0 - sat) * 0.0820 + sat, 0.0,
        1.0, 1.0, 1.0, 1.0
    };
    
    color = mul(color, adjust);
    screen = saturate(screen * lum);
    screen = mul(color, screen);
    return pow(screen, 1.0 / display_gamma);
}

float4 main(in out_vertex VOUT,
    uniform sampler2D s0 : TEXUNIT0,
    uniform input IN) : COLOR {
    float2 angle = VOUT.texCoord * VOUT.omega;
    float3 res = gba_color(VOUT.texCoord).xyz;
    
    float yFactor = (brighten_scanlines + sin(angle.y)) / (brighten_scanlines + 1);
    float3 xFactor = (brighten_lcd + sin(angle.x + offsets)) / (brighten_lcd + 1);
    
    float3 color = yFactor * xFactor * res;
    
    return float4(color.x, color.y, color.z, 1.0);
}
#endif