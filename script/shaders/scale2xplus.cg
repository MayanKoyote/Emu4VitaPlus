/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
   - FX11 compilers
*/

/*
   Scale2xPlus shader 

   - Copyright (C) 2007 guest(r) - guest.r@gmail.com

   - License: GNU-GPL  


   The Scale2x algorithm:

   - Scale2x Homepage: http://scale2x.sourceforge.net/

   - Copyright (C) 2001, 2002, 2003, 2004 Andrea Mazzoleni 

   - License: GNU-GPL  

 */


struct out_vertex
{
	float4 position : POSITION;
	float2 texCoord : TEXCOORD0;
	float4 t1       : TEXCOORD1;
	float4 t2       : TEXCOORD2;
};

struct input
{
    float2 video_size;
    float2 texture_size;
    float2 output_size;
    float frame_count;
    float frame_direction;
    float frame_rotation;
};

#if defined(VERTEX)

void main(
  float2 aTexcoord,
  float4 aPosition,
  uniform input IN,
  uniform float4x4 wvp,
  out_vertex out OUT)
{
	OUT.position = mul(aPosition, wvp);
	float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
	float dx = ps.x;
	float dy = ps.y;

	OUT.texCoord = aTexcoord;				// E
	OUT.t1 = aTexcoord.xyxy + float4(  0,-dy,-dx,  0);	// B, D
	OUT.t2 = aTexcoord.xyxy + float4( dx,  0,  0, dy);	// F, H	
}

#elif defined(FRAGMENT)

float4 scale2xplus(float2 texture_size, float4 t1, float4 t2, float2 texCoord, sampler2D decal)
{
   float2 fp = frac(texCoord*texture_size);

   // Reading the texels

   float3 B = tex2D(decal, t1.xy).xyz;
   float3 D = tex2D(decal, t1.zw).xyz;
   float3 E = tex2D(decal, texCoord).xyz;
   float3 F = tex2D(decal, t2.xy).xyz;
   float3 H = tex2D(decal, t2.zw).xyz;

   float3 E0 = D == B && B != H && D != F ? D : E;
   float3 E1 = B == F && B != H && D != F ? F : E;
   float3 E2 = D == H && B != H && D != F ? D : E;
   float3 E3 = H == F && B != H && D != F ? F : E;

   // Product interpolation
   return float4((E3*fp.x+E2*(1-fp.x))*fp.y+(E1*fp.x+E0*(1-fp.x))*(1-fp.y),1);
}

float4 main(in out_vertex VOUT,
  uniform sampler2D decal : TEXUNIT0,
  uniform input IN) : COLOR
{
	return scale2xplus(IN.texture_size, VOUT.t1, VOUT.t2, VOUT.texCoord, decal);
}
#endif