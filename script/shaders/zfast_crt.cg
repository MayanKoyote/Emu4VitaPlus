/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
   - FX11
*/

/*
    zfast_crt_standard - A simple, fast CRT shader.
    Copyright (C) 2017 Greg Hogan (SoltanGris42)
    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the Free
    Software Foundation; either version 2 of the License, or (at your option)
    any later version.
Notes:  This shader does scaling with a weighted linear filter for adjustable
	sharpness on the x and y axes based on the algorithm by Inigo Quilez here:
	http://http://www.iquilezles.org/www/articles/texture/texture.htm
	but modified to be somewhat sharper.  Then a scanline effect that varies
	based on pixel brighness is applied along with a monochrome aperture mask.
	This shader runs at 60fps on the Raspberry Pi 3 hardware at 2mpix/s
	resolutions (1920x1080 or 1600x1200).
*/

//This can't be an option without slowing the shader down
//Comment this out for a coarser 3 pixel mask...which is currently broken
//on SNES Classic Edition due to Mali 400 gpu precision
#define FINEMASK
//Some drivers don't return black with texture coordinates out of bounds
//SNES Classic is too slow to black these areas out when using fullscreen
//overlays.  But you can uncomment the below to black them out if necessary
// #define BLACK_OUT_BORDER

#define BLURSCALEX 0.45
//#define BLURSCALEY 0.20
#define LOWLUMSCAN 5.0
#define HILUMSCAN 10.0
#define BRIGHTBOOST 1.25
#define MASK_DARK 0.25
#define MASK_FADE 0.8

// ***********
// * STRUCTS *
// ***********

struct out_vertex
{
	float4 position : POSITION;
	float2 texCoord : TEXCOORD0;
   float maskFade : TEXCOORD1;
   float2 invDims : TEXCOORD2;
};

struct input
{
    float2 video_size;
    float2 texture_size;
    float2 output_size;
    float frame_count;
    float frame_direction;
    float frame_rotation;
};

// *****************
// * VERTEX SHADER *
// *****************
#if defined(VERTEX)

void main (
  float2 aTexcoord,
  float4 aPosition,
  uniform input IN,
  uniform float4x4 wvp,
  out_vertex out OUT)
{
	OUT.position = mul(aPosition, wvp);
	OUT.texCoord = aTexcoord;
   
   OUT.maskFade = 0.333 * MASK_FADE;
   OUT.invDims = 1.0 / IN.texture_size.xy;
}

#elif defined(FRAGMENT)
// ****************
// * PIXEL SHADER *
// ****************

#define mix(x, y, a) ((x)*(1.0-(a)) + (y)*(a))

float4 zfast_crt(sampler2D Source, float2 texture_size, float2 video_size, float2 output_size, float2 coord, float maskFade, float2 invDims)
{
   float2 gl_FragCoord = (coord * texture_size / video_size) * output_size;
	//This is just like "Quilez Scaling" but sharper
	float2 p = coord * texture_size;
	float2 i = floor(p) + 0.50;
	float2 f = p - i;
	p = (i + 4.0*f*f*f)*invDims;
	p.x = mix( p.x , coord.x, BLURSCALEX);
	float Y = f.y*f.y;
	float YY = Y*Y;
	
#if defined(FINEMASK) 
	float whichmask = frac( gl_FragCoord.x*-0.4999);
	float mask = 1.0 + float(whichmask < 0.5) * -MASK_DARK;
#else
	float whichmask = frac(gl_FragCoord.x * -0.3333);
	float mask = 1.0 + float(whichmask <= 0.33333) * -MASK_DARK;
#endif
	float3 colour = tex2D(Source, p).rgb;
	
	float scanLineWeight = (BRIGHTBOOST - LOWLUMSCAN*(Y - 2.05*YY));
	float scanLineWeightB = 1.0 - HILUMSCAN*(YY-2.8*YY*Y);	
	
#if defined(BLACK_OUT_BORDER)
	colour.rgb*=float(tc.x > 0.0)*float(tc.y > 0.0); //why doesn't the driver do the right thing?
#endif
   float3 inter_color = dot(colour.rgb,float3(maskFade,maskFade,maskFade));
   return float4(colour.rgb*mix(scanLineWeight*mask, scanLineWeightB, inter_color), 1.0);
}
   
float4 main(in out_vertex VOUT,
  uniform sampler2D decal : TEXUNIT0,
  uniform input IN) : COLOR
{
	return zfast_crt(decal, IN.texture_size, IN.video_size, IN.output_size, VOUT.texCoord, VOUT.maskFade, VOUT.invDims);
}
#endif