/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
   - FX11
*/

/*
    zfast_lcd_standard - A very simple LCD shader meant to be used at 1080p
		on the raspberry pi 3.
		
    Copyright (C) 2017 Greg Hogan (SoltanGris42)
    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the Free
    Software Foundation; either version 2 of the License, or (at your option)
    any later version.
Notes:  This shader just does nearest neighbor scaling of the game and then
		darkens the border pixels to imitate an LCD screen. You can change the
		amount of darkening and the thickness of the borders.  You can also 
		do basic gamma adjustment.
		
*/

//Some drivers don't return black with texture coordinates out of bounds
//SNES Classic is too slow to black these areas out when using fullscreen
//overlays.  But you can uncomment the below to black them out if necessary

//#define BLACK_OUT_BORDER


#define BORDERMULT 14.0
#define GBAGAMMA 1.0


// ***********
// * STRUCTS *
// ***********

struct out_vertex
{
	float4 position : POSITION;
	float2 texCoord : TEXCOORD0;
   float2 invSize :TEXCOORD1;
};

struct input
{
    float2 video_size;
    float2 texture_size;
    float2 output_size;
    float frame_count;
    float frame_direction;
    float frame_rotation;
};

// *****************
// * VERTEX SHADER *
// *****************

#if defined(VERTEX)

void main (
  float2 aTexcoord,
  float4 aPosition,
  uniform input IN,
  uniform float4x4 wvp,
  out_vertex out OUT)
{
	OUT.position = mul(aPosition, wvp);
	OUT.texCoord = aTexcoord;
   
   OUT.invSize = 1.0 / IN.texture_size.xy;
}

#elif defined(FRAGMENT)
// ****************
// * PIXEL SHADER *
// ****************

float4 zfast_lcd(sampler2D Source, float2 texture_size, float2 coord, float2 invSize)
{
	float2 texcoordInPixels = coord.xy * texture_size.xy;
	float2 centerCoord = floor(texcoordInPixels.xy)+float2(0.5,0.5);
	float2 distFromCenter = abs(centerCoord - texcoordInPixels);

	float Y = max(distFromCenter.x,(distFromCenter.y));

	Y=Y*Y;
	float YY = Y*Y;
	float YYY = YY*Y;

	float LineWeight = YY - 2.7*YYY;
	LineWeight = 1.0 - BORDERMULT*LineWeight;

	float3 colour = tex2D(Source, invSize*centerCoord).rgb*LineWeight;

//#if defined(GBAGAMMA)
//	//colour.rgb = pow(colour.rgb, float3(1.35,1.35,1.35));
//	colour.rgb*=0.6+0.4*(colour.rgb); //fake gamma because the pi is too slow!
//#endif
	if (GBAGAMMA > 0.5)
		colour.rgb*=0.6+0.4*(colour.rgb); //fake gamma because the pi is too slow!
		
   return float4(colour.rgb , 1.0);
}
   
float4 main(in out_vertex VOUT,
  uniform sampler2D decal :TEXUNIT0,
  uniform input IN) : COLOR
{
	return zfast_lcd(decal, IN.texture_size, VOUT.texCoord, VOUT.invSize);
}
#endif